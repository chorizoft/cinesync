generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model List {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  isPrivate Boolean   @map("is_private")
  creatorId String    @map("creator_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  movie     Movie[]
  user      User[]
  comments  Comment[]
}

model Movie {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String
  genre       String[]
  releaseDate String   @map("release_date")
  posterUrl   String   @map("poster_url")
  rating      Float
  imdbId      String   @unique @map("imdb_id")
  list        List[]
  user        User[]
}

model User {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username       String    @unique
  email          String    @unique
  password       String
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  role           Role
  avatarName     String?   @map("avatar_name")
  list           List[]
  friendsWith    Friends[] @relation("user_1")
  friendsRequest Friends[] @relation("user_2")
  comments       Comment[]
  movie          Movie[]
}

model Friends {
  user_1    User     @relation("user_1", fields: [userId1], references: [id], onDelete: Cascade)
  userId1   String   @map("id_1") @db.Uuid
  user_2    User     @relation("user_2", fields: [userId2], references: [id], onDelete: Cascade)
  userId2   String   @map("id_2") @db.Uuid
  isFriend  Boolean  @map("is_friend")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId1, userId2])
}

model Comment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text      String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   @map("author_id") @db.Uuid
  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId    String   @map("list_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Image {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String @unique
  image Bytes
}

enum Role {
  ADMIN
  USER
}
